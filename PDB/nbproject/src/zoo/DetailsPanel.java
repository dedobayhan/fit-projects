/**
 *  Project:  PDB 2008
 *  Authors:  Ondrej Lengal,   xlenga00@stud.fit.vutbr.cz
 *            Libor Polcak,    xpolca03@stud.fit.vutbr.cz
 *            Boris Prochazka, xproch63@stud.fit.vutbr.cz
 *            Petr Zemek,      xzemek02@stud.fit.vutbr.cz
 *
 * @brief Object details panel class.
 *
 */

package zoo;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.border.EtchedBorder;

/**
 * @brief Panel containing information about selected object.
 */
public class DetailsPanel extends javax.swing.JPanel implements ActionListener {

	private ObjectData _currentObjectData = null;

	/// Name of the "change name" menu item and corresponding command
	private static final String CHANGE_NAME_COMMAND = "Change name";

	/// Name of the "change description" menu item and corresponding command
	private static final String CHANGE_DESCRIPTION_COMMAND = "Change description";

	/// Name of the "change photo" menu item and corresponding command
	private static final String CHANGE_PHOTO_COMMAND = "Change photo";

	/// If there is not description set, this value will be used
	private static final String EMPTY_DESCRIPTION_VALUE = "-";

	/**
	 * @brief Default constructor
	 */
	public DetailsPanel() {
		initComponents();

		// Add border to the name label (I can't do it via "design" page)
		name.setBorder(new EtchedBorder());
	}

	/**
	 * @brief Displays object data.
	 *
	 * @param[in] objectData Object data to be displayed.
	 */
	public void displayObjectInfo(ObjectData objectData) {
		_currentObjectData = objectData;

		// Display object name
		name.setText(objectData.name);

		// Display object description
		description.setText(objectData.description);

		// Display object photo
		photo.startDrawing();
		photo.displayPhoto(objectData.photo);
		photo.endDrawing();
	}

	/**
	 * @brief Clears display (no object details will be displayed).
	 */
	public void clearDisplay() {
		_currentObjectData = null;
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        photo = new zoo.PhotoPanel();
        name = new javax.swing.JLabel();
        description = new javax.swing.JLabel();

        setName("Form"); // NOI18N

        photo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        photo.setName("photo"); // NOI18N
        photo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                photoMouseClicked(evt);
            }
        });

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(zoo.ZooApp.class).getContext().getResourceMap(DetailsPanel.class);
        name.setText(resourceMap.getString("name.text")); // NOI18N
        name.setName("name"); // NOI18N
        name.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                nameMouseClicked(evt);
            }
        });

        description.setFont(resourceMap.getFont("description.font")); // NOI18N
        description.setText(resourceMap.getString("description.text")); // NOI18N
        description.setName("description"); // NOI18N
        description.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                descriptionMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(photo, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, 218, Short.MAX_VALUE)
                    .addComponent(description, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addComponent(photo, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(description, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(140, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

	private void nameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_nameMouseClicked
		if (_currentObjectData == null) {
			// There are no object details, nothing to do here
			return;
		}

		// Was it a right mouse button click and can the user change the name
		// of this object?
		if ((evt.getModifiers() & MouseEvent.BUTTON3_MASK) == MouseEvent.BUTTON3_MASK &&
				_currentObjectData.tableName != null &&
				_currentObjectData.tableName.equals(Objects.PAVILION_TABLE_NAME)) {
			// Create the popup menu
			JPopupMenu popupMenu = new JPopupMenu();

			JMenuItem menuItem;
			menuItem = new JMenuItem(CHANGE_NAME_COMMAND);
			menuItem.addActionListener(this);
			popupMenu.add(menuItem);

			popupMenu.show(this, evt.getX(), evt.getY());
		}
	}//GEN-LAST:event_nameMouseClicked

	private void descriptionMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_descriptionMouseClicked
		if (_currentObjectData == null) {
			// There are no object details, nothing to do here
			return;
		}

		// Was it a right mouse button click and can the user change the description
		// of this object?
		if ((evt.getModifiers() & MouseEvent.BUTTON3_MASK) == MouseEvent.BUTTON3_MASK &&
				_currentObjectData.tableName != null &&
				_currentObjectData.tableName.equals(Objects.REFRESHMENT_TABLE_NAME)) {
			// Create the popup menu
			JPopupMenu popupMenu = new JPopupMenu();

			JMenuItem menuItem;
			menuItem = new JMenuItem(CHANGE_DESCRIPTION_COMMAND);
			menuItem.addActionListener(this);
			popupMenu.add(menuItem);

			// FIXME - it displays the menu on a wrong position without these addings...
			popupMenu.show(this, evt.getX(), evt.getY() +
					name.getHeight() + photo.getHeight() + 16);
		}
	}//GEN-LAST:event_descriptionMouseClicked

	private void photoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_photoMouseClicked
		if (_currentObjectData == null) {
			// There are no object details, nothing to do here
			return;
		}

		// Was it a right mouse button click and can the user change the photo
		// of this object?
		if ((evt.getModifiers() & MouseEvent.BUTTON3_MASK) == MouseEvent.BUTTON3_MASK &&
				_currentObjectData.tableName != null &&
				!_currentObjectData.tableName.equals(Objects.PATH_TABLE_NAME)) {
			// Create the popup menu
			JPopupMenu popupMenu = new JPopupMenu();

			JMenuItem menuItem;
			menuItem = new JMenuItem(CHANGE_PHOTO_COMMAND);
			menuItem.addActionListener(this);
			popupMenu.add(menuItem);

			// FIXME - it displays the menu on a wrong position without these addings...
			popupMenu.show(this, evt.getX(), evt.getY() +
					name.getHeight() + 8);
		}
	}//GEN-LAST:event_photoMouseClicked

	public void actionPerformed(ActionEvent evt) {
		if (evt.getActionCommand().equals(CHANGE_NAME_COMMAND)) {
			if (_currentObjectData.tableName != null &&
					_currentObjectData.tableName.equals(Objects.PAVILION_TABLE_NAME)) {
				// Display change pavilion name dialog
				String response = Dialogs.getInputStringFromUser("New name:",
						"Change the name", name.getText());

				// Check name validity
				if (response != null) {
					if (response.equals("")) {
						// Name cannot be empty
						Dialogs.displayErrorMessage(null,
								"Selected name is invalid!",
								"Invalid name");
					} else {
						// Update the name in the application
						name.setText(response);
					}

					// Update the name in the db
					try {
						TemporalQuery.changePavilionName(_currentObjectData.id, response,
								Calendar.getInstance().getDate());
					} catch (SQLException ex) {
						Logger.getLogger("zoo").log(Level.SEVERE,
								"Exception caught (" + ex.getClass() + "): " + ex.getMessage());
						Dialogs.displayErrorMessage(null,
								"There was a database error during the last operation.",
								"Database error");
					}
				}
			}
		} else if (evt.getActionCommand().equals(CHANGE_DESCRIPTION_COMMAND)) {
			if (_currentObjectData.tableName != null &&
					_currentObjectData.tableName.equals(Objects.REFRESHMENT_TABLE_NAME)) {
				// Display change description dialog
				String response = Dialogs.getInputStringFromUser("New description:",
						"Change the description", description.getText());

				// Check description validity
				if (response != null) {
					// Update the description in the application
					if (response.equals("")) {
						description.setText(EMPTY_DESCRIPTION_VALUE);
					} else {
						description.setText(response);
					}

					// Update the description in the db
					try {
						TemporalQuery.changeRefreshmentDescription(_currentObjectData.id,
								response, Calendar.getInstance().getDate());
					} catch (SQLException ex) {
						Logger.getLogger("zoo").log(Level.SEVERE,
								"Exception caught (" + ex.getClass() + "): " + ex.getMessage());
						Dialogs.displayErrorMessage(null,
								"There was a database error during the last operation.",
								"Database error");
					}
				}
			}
		} else if (evt.getActionCommand().equals(CHANGE_PHOTO_COMMAND)) {
			if (_currentObjectData.tableName != null &&
					!_currentObjectData.tableName.equals(Objects.PATH_TABLE_NAME)) {
				File selectedFile = Dialogs.getFileFromUser(this);
				if (selectedFile != null) {
					// Update the db
					try {
						TemporalQuery.changePhoto(_currentObjectData.tableName,
								_currentObjectData.id,
								selectedFile.getAbsolutePath(),
								Calendar.getInstance().getDate());

						// Update the displayed photo
						_currentObjectData.photo = ImageIO.read(selectedFile);
						photo.startDrawing();
						photo.displayPhoto(_currentObjectData.photo);
						photo.endDrawing();
					} catch (IOException ex) {
						Logger.getLogger("zoo").log(Level.SEVERE,
								"Exception caught (" + ex.getClass() + "): " + ex.getMessage());
						Dialogs.displayErrorMessage(null,
								"Selected photo could not uploaded." +
									"\nReason: " + ex.getMessage(),
								"Photo upload error");
					} catch (SQLException ex) {
						Logger.getLogger("zoo").log(Level.SEVERE,
								"Exception caught (" + ex.getClass() + "): " + ex.getMessage());
						Dialogs.displayErrorMessage(null,
								"There was a database error during the last operation.",
								"Database error");
					}
				}
			}
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel description;
    private javax.swing.JLabel name;
    private zoo.PhotoPanel photo;
    // End of variables declaration//GEN-END:variables
}
