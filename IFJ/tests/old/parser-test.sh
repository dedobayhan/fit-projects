#!/bin/bash
# Parser test

# Assignment
echo ""
echo "Assignment"
echo ""
./tests/parser <<< "int f() {a:=a;}"
./tests/parser <<< "int f() {a:=1;}"
./tests/parser <<< "int f() {a:=1.0;}"
./tests/parser <<< "int f() {a:=\"string\";}"
./tests/parser <<< "int f() {a:=a + a;}"
./tests/parser <<< "int f() {a:=1 + 1;}"
./tests/parser <<< "int f() {a:=1.0 + 1.0;}"
./tests/parser <<< "int f() {a:=\"string\" + \"string\";}"
./tests/parser <<< "int f() {a:=a - a;}"
./tests/parser <<< "int f() {a:=1 - 1;}"
./tests/parser <<< "int f() {a:=1.0 - 1.0;}"
./tests/parser <<< "int f() {a:=a * a;}"
./tests/parser <<< "int f() {a:=1 * 1;}"
./tests/parser <<< "int f() {a:=1.0 * 1.0;}"
./tests/parser <<< "int f() {a:=a / a;}"
./tests/parser <<< "int f() {a:=1 / 1;}"
./tests/parser <<< "int f() {a:=1.0 / 1.0;}"
./tests/parser <<< "int f() {a:=a ^ a;}"
./tests/parser <<< "int f() {a:=1 ^ 1;}"
./tests/parser <<< "int f() {a:=1.0 ^ 1.0;}"
./tests/parser <<< "int f() {a:=a div a;}"
./tests/parser <<< "int f() {a:=1 div 1;}"
./tests/parser <<< "int f() {a:=a - a - a;}"
./tests/parser <<< "int f() {a:=a + a + a;}"
./tests/parser <<< "int f() {a:=a * a * a;}"
./tests/parser <<< "int f() {a:=a / a / a;}"
./tests/parser <<< "int f() {a:=a ^ a ^ a;}"
./tests/parser <<< "int f() {a:=a - a * a;}"
./tests/parser <<< "int f() {a:=a + a * a;}"
./tests/parser <<< "int f() {a:=a * a * a;}"
./tests/parser <<< "int f() {a:=a / a * a;}"
./tests/parser <<< "int f() {a:=a ^ a * a;}"
./tests/parser <<< "int f() {a:=a div a div a;}"
echo "< > <= >= != =="
./tests/parser <<< "int f() {a:=a < a;}"
./tests/parser <<< "int f() {a:=1 < 1;}"
./tests/parser <<< "int f() {a:=1.0 < 1.0;}"
./tests/parser <<< "int f() {a:=\"string\" < \"string\";}"
./tests/parser <<< "int f() {a:=a > a;}"
./tests/parser <<< "int f() {a:=1 > 1;}"
./tests/parser <<< "int f() {a:=1.0 > 1.0;}"
./tests/parser <<< "int f() {a:=\"string\" > \"string\";}"
./tests/parser <<< "int f() {a:=a <= a;}"
./tests/parser <<< "int f() {a:=1 <= 1;}"
./tests/parser <<< "int f() {a:=1.0 <= 1.0;}"
./tests/parser <<< "int f() {a:=\"string\" <= \"string\";}"
./tests/parser <<< "int f() {a:=a >= a;}"
./tests/parser <<< "int f() {a:=1 >= 1;}"
./tests/parser <<< "int f() {a:=1.0 >= 1.0;}"
./tests/parser <<< "int f() {a:=\"string\" >= \"string\";}"
./tests/parser <<< "int f() {a:=a == a;}"
./tests/parser <<< "int f() {a:=1 == 1;}"
./tests/parser <<< "int f() {a:=1.0 == 1.0;}"
./tests/parser <<< "int f() {a:=\"string\" == \"string\";}"
./tests/parser <<< "int f() {a:=a != a;}"
./tests/parser <<< "int f() {a:=1 != 1;}"
./tests/parser <<< "int f() {a:=1.0 != 1.0;}"
./tests/parser <<< "int f() {a:=\"string\" != \"string\";}"
echo "( )"
./tests/parser <<< "int f() {a:=(1);}"
./tests/parser <<< "int f() {a:=(a);}"
./tests/parser <<< "int f() {a:=(1.0);}"
./tests/parser <<< "int f() {a:=(\"string\");}"
./tests/parser <<< "int f() {a:=a + (a + a);}"
./tests/parser <<< "int f() {a:=a * (a + a);}"
./tests/parser <<< "int f() {a:=a - (a + a);}"
./tests/parser <<< "int f() {a:=a / (a + a);}"
./tests/parser <<< "int f() {a:=a ^ (a + a);}"
./tests/parser <<< "int f() {a:=(((((a)))));}"
./tests/parser <<< "int f() {a:=(1 + 2) * (a ^ b);}"
./tests/parser <<< "int f() {a:=(a - b) / (1.0 + 2.0);}"
./tests/parser <<< "int f() {a:=(a ^ b) + (1.0 / 2);}"
./tests/parser <<< "int f() {a:=(a - v) - (c + b);}"
./tests/parser <<< "int f() {a:=(1.0 ^ 1.2) ^ (1.0 / 2.0);}"
./tests/parser <<< "int f() {a:=(a * (1.0 - 2.9))^(a + (b + c));}"
./tests/parser <<< "int f() {a:=((c) / (a * (1.0 - 2.9)) ^ (a + (b + c) * (1.0 - a))) * (1 - b);}"


# Return
echo ""
echo "Return"
echo ""
./tests/parser <<< "int f() {return a;}"
./tests/parser <<< "int f() {return 1;}"
./tests/parser <<< "int f() {return 1.0;}"
./tests/parser <<< "int f() {return \"string\";}"
./tests/parser <<< "int f() {return a + a;}"
./tests/parser <<< "int f() {return 1 + 1;}"
./tests/parser <<< "int f() {return 1.0 + 1.0;}"
./tests/parser <<< "int f() {return \"string\" + \"string\";}"
./tests/parser <<< "int f() {return a - a;}"
./tests/parser <<< "int f() {return 1 - 1;}"
./tests/parser <<< "int f() {return 1.0 - 1.0;}"
./tests/parser <<< "int f() {return a * a;}"
./tests/parser <<< "int f() {return 1 * 1;}"
./tests/parser <<< "int f() {return 1.0 * 1.0;}"
./tests/parser <<< "int f() {return a / a;}"
./tests/parser <<< "int f() {return 1 / 1;}"
./tests/parser <<< "int f() {return 1.0 / 1.0;}"
./tests/parser <<< "int f() {return a ^ a;}"
./tests/parser <<< "int f() {return 1 ^ 1;}"
./tests/parser <<< "int f() {return 1.0 ^ 1.0;}"
./tests/parser <<< "int f() {return a div a;}"
./tests/parser <<< "int f() {return 1 div 1;}"
./tests/parser <<< "int f() {return a - a - a;}"
./tests/parser <<< "int f() {return a + a + a;}"
./tests/parser <<< "int f() {return a * a * a;}"
./tests/parser <<< "int f() {return a / a / a;}"
./tests/parser <<< "int f() {return a ^ a ^ a;}"
./tests/parser <<< "int f() {return a - a * a;}"
./tests/parser <<< "int f() {return a + a * a;}"
./tests/parser <<< "int f() {return a * a * a;}"
./tests/parser <<< "int f() {return a / a * a;}"
./tests/parser <<< "int f() {return a ^ a * a;}"
./tests/parser <<< "int f() {return a div a div a;}"
echo "< > <= >= != =="
./tests/parser <<< "int f() {return a < a;}"
./tests/parser <<< "int f() {return 1 < 1;}"
./tests/parser <<< "int f() {return 1.0 < 1.0;}"
./tests/parser <<< "int f() {return \"string\" < \"string\";}"
./tests/parser <<< "int f() {return a > a;}"
./tests/parser <<< "int f() {return 1 > 1;}"
./tests/parser <<< "int f() {return 1.0 > 1.0;}"
./tests/parser <<< "int f() {return \"string\" > \"string\";}"
./tests/parser <<< "int f() {return a <= a;}"
./tests/parser <<< "int f() {return 1 <= 1;}"
./tests/parser <<< "int f() {return 1.0 <= 1.0;}"
./tests/parser <<< "int f() {return \"string\" <= \"string\";}"
./tests/parser <<< "int f() {return a >= a;}"
./tests/parser <<< "int f() {return 1 >= 1;}"
./tests/parser <<< "int f() {return 1.0 >= 1.0;}"
./tests/parser <<< "int f() {return \"string\" >= \"string\";}"
./tests/parser <<< "int f() {return a == a;}"
./tests/parser <<< "int f() {return 1 == 1;}"
./tests/parser <<< "int f() {return 1.0 == 1.0;}"
./tests/parser <<< "int f() {return \"string\" == \"string\";}"
./tests/parser <<< "int f() {return a != a;}"
./tests/parser <<< "int f() {return 1 != 1;}"
./tests/parser <<< "int f() {return 1.0 != 1.0;}"
./tests/parser <<< "int f() {return \"string\" != \"string\";}"
echo "( )"
./tests/parser <<< "int f() {return (1);}"
./tests/parser <<< "int f() {return (a);}"
./tests/parser <<< "int f() {return (1.0);}"
./tests/parser <<< "int f() {return (\"string\");}"
./tests/parser <<< "int f() {return a + (a + a);}"
./tests/parser <<< "int f() {return a * (a + a);}"
./tests/parser <<< "int f() {return a - (a + a);}"
./tests/parser <<< "int f() {return a / (a + a);}"
./tests/parser <<< "int f() {return a ^ (a + a);}"
./tests/parser <<< "int f() {return (((((a)))));}"
./tests/parser <<< "int f() {return (1 + 2) * (a ^ b);}"
./tests/parser <<< "int f() {return (a - b) / (1.0 + 2.0);}"
./tests/parser <<< "int f() {return (a ^ b) + (1.0 / 2);}"
./tests/parser <<< "int f() {return (a - v) - (c + b);}"
./tests/parser <<< "int f() {return (1.0 ^ 1.2) ^ (1.0 / 2.0);}"
./tests/parser <<< "int f() {return (a * (1.0 - 2.9))^(a + (b + c));}"
./tests/parser <<< "int f() {return ((c) / (a * (1.0 - 2.9)) ^ (a + (b + c) * (1.0 - a))) * (1 - b);}"

# If
echo ""
echo "If"
echo ""
./tests/parser <<< "int f() {if a goto x;}"
./tests/parser <<< "int f() {if 1 goto x;}"
./tests/parser <<< "int f() {if 1.0 goto x;}"
./tests/parser <<< "int f() {if \"string\" goto x;}"
./tests/parser <<< "int f() {if a + a goto x;}"
./tests/parser <<< "int f() {if 1 + 1 goto x;}"
./tests/parser <<< "int f() {if 1.0 + 1.0 goto x;}"
./tests/parser <<< "int f() {if \"string\" + \"string\" goto x;}"
./tests/parser <<< "int f() {if a - a goto x;}"
./tests/parser <<< "int f() {if 1 - 1 goto x;}"
./tests/parser <<< "int f() {if 1.0 - 1.0 goto x;}"
./tests/parser <<< "int f() {if a * a goto x;}"
./tests/parser <<< "int f() {if 1 * 1 goto x;}"
./tests/parser <<< "int f() {if 1.0 * 1.0 goto x;}"
./tests/parser <<< "int f() {if a / a goto x;}"
./tests/parser <<< "int f() {if 1 / 1 goto x;}"
./tests/parser <<< "int f() {if 1.0 / 1.0 goto x;}"
./tests/parser <<< "int f() {if a ^ a goto x;}"
./tests/parser <<< "int f() {if 1 ^ 1 goto x;}"
./tests/parser <<< "int f() {if 1.0 ^ 1.0 goto x;}"
./tests/parser <<< "int f() {if a div a goto x;}"
./tests/parser <<< "int f() {if 1 div 1 goto x;}"
./tests/parser <<< "int f() {if a - a - a goto x;}"
./tests/parser <<< "int f() {if a + a + a goto x;}"
./tests/parser <<< "int f() {if a * a * a goto x;}"
./tests/parser <<< "int f() {if a / a / a goto x;}"
./tests/parser <<< "int f() {if a ^ a ^ a goto x;}"
./tests/parser <<< "int f() {if a - a * a goto x;}"
./tests/parser <<< "int f() {if a + a * a goto x;}"
./tests/parser <<< "int f() {if a * a * a goto x;}"
./tests/parser <<< "int f() {if a / a * a goto x;}"
./tests/parser <<< "int f() {if a ^ a * a goto x;}"
./tests/parser <<< "int f() {if a div a div a goto x;}"
echo "< > <= >= != =="
./tests/parser <<< "int f() {if a < a goto x;}"
./tests/parser <<< "int f() {if 1 < 1 goto x;}"
./tests/parser <<< "int f() {if 1.0 < 1.0 goto x;}"
./tests/parser <<< "int f() {if \"string\" < \"string\" goto x;}"
./tests/parser <<< "int f() {if a > a goto x;}"
./tests/parser <<< "int f() {if 1 > 1 goto x;}"
./tests/parser <<< "int f() {if 1.0 > 1.0 goto x;}"
./tests/parser <<< "int f() {if \"string\" > \"string\" goto x;}"
./tests/parser <<< "int f() {if a <= a goto x;}"
./tests/parser <<< "int f() {if 1 <= 1 goto x;}"
./tests/parser <<< "int f() {if 1.0 <= 1.0 goto x;}"
./tests/parser <<< "int f() {if \"string\" <= \"string\" goto x;}"
./tests/parser <<< "int f() {if a >= a goto x;}"
./tests/parser <<< "int f() {if 1 >= 1 goto x;}"
./tests/parser <<< "int f() {if 1.0 >= 1.0 goto x;}"
./tests/parser <<< "int f() {if \"string\" >= \"string\" goto x;}"
./tests/parser <<< "int f() {if a == a goto x;}"
./tests/parser <<< "int f() {if 1 == 1 goto x;}"
./tests/parser <<< "int f() {if 1.0 == 1.0 goto x;}"
./tests/parser <<< "int f() {if \"string\" == \"string\" goto x;}"
./tests/parser <<< "int f() {if a != a goto x;}"
./tests/parser <<< "int f() {if 1 != 1 goto x;}"
./tests/parser <<< "int f() {if 1.0 != 1.0 goto x;}"
./tests/parser <<< "int f() {if \"string\" != \"string\" goto x;}"
echo "( )"
./tests/parser <<< "int f() {if (1) goto x;}"
./tests/parser <<< "int f() {if (a) goto x;}"
./tests/parser <<< "int f() {if (1.0) goto x;}"
./tests/parser <<< "int f() {if (\"string\") goto x;}"
./tests/parser <<< "int f() {if a + (a + a) goto x;}"
./tests/parser <<< "int f() {if a * (a + a) goto x;}"
./tests/parser <<< "int f() {if a - (a + a) goto x;}"
./tests/parser <<< "int f() {if a / (a + a) goto x;}"
./tests/parser <<< "int f() {if a ^ (a + a) goto x;}"
./tests/parser <<< "int f() {if (((((a))))) goto x;}"
./tests/parser <<< "int f() {if (1 + 2) * (a ^ b) goto x;}"
./tests/parser <<< "int f() {if (a - b) / (1.0 + 2.0) goto x;}"
./tests/parser <<< "int f() {if (a ^ b) + (1.0 / 2) goto x;}"
./tests/parser <<< "int f() {if (a - v) - (c + b) goto x;}"
./tests/parser <<< "int f() {if (1.0 ^ 1.2) ^ (1.0 / 2.0) goto x;}"
./tests/parser <<< "int f() {if (a * (1.0 - 2.9))^(a + (b + c)) goto x;}"
./tests/parser <<< "int f() {if ((c) / (a * (1.0 - 2.9)) ^ (a + (b + c) * (1.0 - a))) * (1 - b) goto x;}"

# Function call
echo ""
echo "Function call"
echo ""
./tests/parser <<< "int f() {func(f2(a));}"
./tests/parser <<< "int f() {func(f2(1));}"
./tests/parser <<< "int f() {func(f2(1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\"));}"
./tests/parser <<< "int f() {func(f2(a + a));}"
./tests/parser <<< "int f() {func(f2(1 + 1));}"
./tests/parser <<< "int f() {func(f2(1.0 + 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" + \"string\"));}"
./tests/parser <<< "int f() {func(f2(a - a));}"
./tests/parser <<< "int f() {func(f2(1 - 1));}"
./tests/parser <<< "int f() {func(f2(1.0 - 1.0));}"
./tests/parser <<< "int f() {func(f2(a * a));}"
./tests/parser <<< "int f() {func(f2(1 * 1));}"
./tests/parser <<< "int f() {func(f2(1.0 * 1.0));}"
./tests/parser <<< "int f() {func(f2(a / a));}"
./tests/parser <<< "int f() {func(f2(1 / 1));}"
./tests/parser <<< "int f() {func(f2(1.0 / 1.0));}"
./tests/parser <<< "int f() {func(f2(a ^ a));}"
./tests/parser <<< "int f() {func(f2(1 ^ 1));}"
./tests/parser <<< "int f() {func(f2(1.0 ^ 1.0));}"
./tests/parser <<< "int f() {func(f2(a div a));}"
./tests/parser <<< "int f() {func(f2(1 div 1));}"
./tests/parser <<< "int f() {func(f2(a - a - a));}"
./tests/parser <<< "int f() {func(f2(a + a + a));}"
./tests/parser <<< "int f() {func(f2(a * a * a));}"
./tests/parser <<< "int f() {func(f2(a / a / a));}"
./tests/parser <<< "int f() {func(f2(a ^ a ^ a));}"
./tests/parser <<< "int f() {func(f2(a - a * a));}"
./tests/parser <<< "int f() {func(f2(a + a * a));}"
./tests/parser <<< "int f() {func(f2(a * a * a));}"
./tests/parser <<< "int f() {func(f2(a / a * a));}"
./tests/parser <<< "int f() {func(f2(a ^ a * a));}"
./tests/parser <<< "int f() {func(f2(a div a div a));}"
echo "< > <= >= != =="
./tests/parser <<< "int f() {func(f2(a < a));}"
./tests/parser <<< "int f() {func(f2(1 < 1));}"
./tests/parser <<< "int f() {func(f2(1.0 < 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" < \"string\"));}"
./tests/parser <<< "int f() {func(f2(a > a));}"
./tests/parser <<< "int f() {func(f2(1 > 1));}"
./tests/parser <<< "int f() {func(f2(1.0 > 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" > \"string\"));}"
./tests/parser <<< "int f() {func(f2(a <= a));}"
./tests/parser <<< "int f() {func(f2(1 <= 1));}"
./tests/parser <<< "int f() {func(f2(1.0 <= 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" <= \"string\"));}"
./tests/parser <<< "int f() {func(f2(a >= a));}"
./tests/parser <<< "int f() {func(f2(1 >= 1));}"
./tests/parser <<< "int f() {func(f2(1.0 >= 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" >= \"string\"));}"
./tests/parser <<< "int f() {func(f2(a == a));}"
./tests/parser <<< "int f() {func(f2(1 == 1));}"
./tests/parser <<< "int f() {func(f2(1.0 == 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" == \"string\"));}"
./tests/parser <<< "int f() {func(f2(a != a));}"
./tests/parser <<< "int f() {func(f2(1 != 1));}"
./tests/parser <<< "int f() {func(f2(1.0 != 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" != \"string\"));}"
echo "( )"
./tests/parser <<< "int f() {func(f2((1)));}"
./tests/parser <<< "int f() {func(f2((a)));}"
./tests/parser <<< "int f() {func(f2((1.0)));}"
./tests/parser <<< "int f() {func(f2((\"string\")));}"
./tests/parser <<< "int f() {func(f2(a + (a + a)));}"
./tests/parser <<< "int f() {func(f2(a * (a + a)));}"
./tests/parser <<< "int f() {func(f2(a - (a + a)));}"
./tests/parser <<< "int f() {func(f2(a / (a + a)));}"
./tests/parser <<< "int f() {func(f2(a ^ (a + a)));}"
./tests/parser <<< "int f() {func(f2((((((a)))))));}"
./tests/parser <<< "int f() {func(f2((1 + 2) * (a ^ b)));}"
./tests/parser <<< "int f() {func(f2((a - b) / (1.0 + 2.0)));}"
./tests/parser <<< "int f() {func(f2((a ^ b) + (1.0 / 2)));}"
./tests/parser <<< "int f() {func(f2((a - v) - (c + b)));}"
./tests/parser <<< "int f() {func(f2((1.0 ^ 1.2) ^ (1.0 / 2.0)));}"
./tests/parser <<< "int f() {func(f2((a * (1.0 - 2.9))^(a + (b + c))));}"
./tests/parser <<< "int f() {func(f2(((c) / (a * (1.0 - 2.9)) ^ (a + (b + c) * (1.0 - a))) * (1 - b)));}"

# Function call in another function
echo ""
echo "Function call"
echo ""
./tests/parser <<< "int f() {func(f2(f3(a)));}"
./tests/parser <<< "int f() {func(f2(1));}"
./tests/parser <<< "int f() {func(f2(1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\"));}"
./tests/parser <<< "int f() {func(f2(a + a));}"
./tests/parser <<< "int f() {func(f2(1 + 1));}"
./tests/parser <<< "int f() {func(f2(1.0 + 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" + \"string\"));}"
./tests/parser <<< "int f() {func(f2(a - a));}"
./tests/parser <<< "int f() {func(f2(1 - 1));}"
./tests/parser <<< "int f() {func(f2(1.0 - 1.0));}"
./tests/parser <<< "int f() {func(f2(a * a));}"
./tests/parser <<< "int f() {func(f2(1 * 1));}"
./tests/parser <<< "int f() {func(f2(1.0 * 1.0));}"
./tests/parser <<< "int f() {func(f2(a / a));}"
./tests/parser <<< "int f() {func(f2(1 / 1));}"
./tests/parser <<< "int f() {func(f2(1.0 / 1.0));}"
./tests/parser <<< "int f() {func(f2(a ^ a));}"
./tests/parser <<< "int f() {func(f2(1 ^ 1));}"
./tests/parser <<< "int f() {func(f2(1.0 ^ 1.0));}"
./tests/parser <<< "int f() {func(f2(a div a));}"
./tests/parser <<< "int f() {func(f2(1 div 1));}"
./tests/parser <<< "int f() {func(f2(a - a - a));}"
./tests/parser <<< "int f() {func(f2(a + a + a));}"
./tests/parser <<< "int f() {func(f2(a * a * a));}"
./tests/parser <<< "int f() {func(f2(a / a / a));}"
./tests/parser <<< "int f() {func(f2(a ^ a ^ a));}"
./tests/parser <<< "int f() {func(f2(a - a * a));}"
./tests/parser <<< "int f() {func(f2(a + a * a));}"
./tests/parser <<< "int f() {func(f2(a * a * a));}"
./tests/parser <<< "int f() {func(f2(a / a * a));}"
./tests/parser <<< "int f() {func(f2(a ^ a * a));}"
./tests/parser <<< "int f() {func(f2(a div a div a));}"
echo "< > <= >= != =="
./tests/parser <<< "int f() {func(f2(a < a));}"
./tests/parser <<< "int f() {func(f2(1 < 1));}"
./tests/parser <<< "int f() {func(f2(1.0 < 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" < \"string\"));}"
./tests/parser <<< "int f() {func(f2(a > a));}"
./tests/parser <<< "int f() {func(f2(1 > 1));}"
./tests/parser <<< "int f() {func(f2(1.0 > 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" > \"string\"));}"
./tests/parser <<< "int f() {func(f2(a <= a));}"
./tests/parser <<< "int f() {func(f2(1 <= 1));}"
./tests/parser <<< "int f() {func(f2(1.0 <= 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" <= \"string\"));}"
./tests/parser <<< "int f() {func(f2(a >= a));}"
./tests/parser <<< "int f() {func(f2(1 >= 1));}"
./tests/parser <<< "int f() {func(f2(1.0 >= 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" >= \"string\"));}"
./tests/parser <<< "int f() {func(f2(a == a));}"
./tests/parser <<< "int f() {func(f2(1 == 1));}"
./tests/parser <<< "int f() {func(f2(1.0 == 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" == \"string\"));}"
./tests/parser <<< "int f() {func(f2(a != a));}"
./tests/parser <<< "int f() {func(f2(1 != 1));}"
./tests/parser <<< "int f() {func(f2(1.0 != 1.0));}"
./tests/parser <<< "int f() {func(f2(\"string\" != \"string\"));}"
echo "( )"
./tests/parser <<< "int f() {func(f2((1)));}"
./tests/parser <<< "int f() {func(f2((a)));}"
./tests/parser <<< "int f() {func(f2((1.0)));}"
./tests/parser <<< "int f() {func(f2((\"string\")));}"
./tests/parser <<< "int f() {func(f2(a + (a + a)));}"
./tests/parser <<< "int f() {func(f2(a * (a + a)));}"
./tests/parser <<< "int f() {func(f2(a - (a + a)));}"
./tests/parser <<< "int f() {func(f2(a / (a + a)));}"
./tests/parser <<< "int f() {func(f2(a ^ (a + a)));}"
./tests/parser <<< "int f() {func(f2((((((a)))))));}"
./tests/parser <<< "int f() {func(f2((1 + 2) * (a ^ b)));}"
./tests/parser <<< "int f() {func(f2((a - b) / (1.0 + 2.0)));}"
./tests/parser <<< "int f() {func(f2((a ^ b) + (1.0 / 2)));}"
./tests/parser <<< "int f() {func(f2((a - v) - (c + b)));}"
./tests/parser <<< "int f() {func(f2((1.0 ^ 1.2) ^ (1.0 / 2.0)));}"
./tests/parser <<< "int f() {func(f2((a * (1.0 - 2.9))^(a + (b + c))));}"
./tests/parser <<< "int f() {func(f2(((c) / (a * (1.0 - 2.9)) ^ (a + (b + c) * (1.0 - a))) * (1 - b)));}"

# More parameters
echo ""
echo "Function call (more parameters)"
echo ""
./tests/parser <<< "int f() {func((1),(1),(1.0),(1),(1.0),(1),(1.0),(1),(1.0),(1));}"
./tests/parser <<< "int f() {func((a),(1),(1.0),(1),(1.0),(1));}"
./tests/parser <<< "int f() {func((1.0),(1),(1.0),(1),(1.0),(1),(1.0),(1));}"
./tests/parser <<< "int f() {func((\"string\"),(\"string\"),(\"string\"),(\"string\"));}"
./tests/parser <<< "int f() {func(a + (a + a),a + (a + a));}"
./tests/parser <<< "int f() {func(a ^ (a + a),a ^ (a + a));}"
./tests/parser <<< "int f() {func((((((a))))),(((((a))))));}"
./tests/parser <<< "int f() {func((1 + 2) * (a ^ b));}"
./tests/parser <<< "int f() {func((a - b) / (1.0 + 2.0),(a - b) / (1.0 + 2.0),(a - b) / (1.0 + 2.0));}"
./tests/parser <<< "int f() {func((a ^ b) + (1.0 / 2),(a ^ b) + (1.0 / 2),(a ^ b) + (1.0 / 2));}"
./tests/parser <<< "int f() {func((a - v) - (c + b),(a - v) - (c + b),(a - v) - (c + b));}"
./tests/parser <<< "int f() {func((1.0 ^ 1.2) ^ (1.0 / 2.0),(1.0 ^ 1.2) ^ (1.0 / 2.0));}"
./tests/parser <<< "int f() {func((a * (1.0 - 2.9))^(a + (b + c)),(a * (1.0 - 2.9))^(a + (b + c)));}"
./tests/parser <<< "int f() {func(((c) / (a * (1.0 - 2.9)) ^ (a + (b + c) * (1.0 - a))) * (1 - b),((c) / (a * (1.0 - 2.9)) ^ (a + (b + c) * (1.0 - a))) * (1 - b));}"

echo ""
echo "Function call in another function"
echo ""
./tests/parser <<< "int f() {func(a);}"
./tests/parser <<< "int f() {func(1);}"
./tests/parser <<< "int f() {func(1.0);}"
./tests/parser <<< "int f() {func(\"string\");}"
./tests/parser <<< "int f() {func(a + a);}"
./tests/parser <<< "int f() {func(1 + 1);}"
./tests/parser <<< "int f() {func(1.0 + 1.0);}"
./tests/parser <<< "int f() {func(\"string\" + \"string\");}"
./tests/parser <<< "int f() {func(a - a);}"
./tests/parser <<< "int f() {func(1 - 1);}"
./tests/parser <<< "int f() {func(1.0 - 1.0);}"
./tests/parser <<< "int f() {func(a * a);}"
./tests/parser <<< "int f() {func(1 * 1);}"
./tests/parser <<< "int f() {func(1.0 * 1.0);}"
./tests/parser <<< "int f() {func(a / a);}"
./tests/parser <<< "int f() {func(1 / 1);}"
./tests/parser <<< "int f() {func(1.0 / 1.0);}"
./tests/parser <<< "int f() {func(a ^ a);}"
./tests/parser <<< "int f() {func(1 ^ 1);}"
./tests/parser <<< "int f() {func(1.0 ^ 1.0);}"
./tests/parser <<< "int f() {func(a div a);}"
./tests/parser <<< "int f() {func(1 div 1);}"
./tests/parser <<< "int f() {func(a - a - a);}"
./tests/parser <<< "int f() {func(a + a + a);}"
./tests/parser <<< "int f() {func(a * a * a);}"
./tests/parser <<< "int f() {func(a / a / a);}"
./tests/parser <<< "int f() {func(a ^ a ^ a);}"
./tests/parser <<< "int f() {func(a - a * a);}"
./tests/parser <<< "int f() {func(a + a * a);}"
./tests/parser <<< "int f() {func(a * a * a);}"
./tests/parser <<< "int f() {func(a / a * a);}"
./tests/parser <<< "int f() {func(a ^ a * a);}"
./tests/parser <<< "int f() {func(a div a div a);}"
echo "< > <= >= != =="
./tests/parser <<< "int f() {func(a < a);}"
./tests/parser <<< "int f() {func(1 < 1);}"
./tests/parser <<< "int f() {func(1.0 < 1.0);}"
./tests/parser <<< "int f() {func(\"string\" < \"string\");}"
./tests/parser <<< "int f() {func(a > a);}"
./tests/parser <<< "int f() {func(1 > 1);}"
./tests/parser <<< "int f() {func(1.0 > 1.0);}"
./tests/parser <<< "int f() {func(\"string\" > \"string\");}"
./tests/parser <<< "int f() {func(a <= a);}"
./tests/parser <<< "int f() {func(1 <= 1);}"
./tests/parser <<< "int f() {func(1.0 <= 1.0);}"
./tests/parser <<< "int f() {func(\"string\" <= \"string\");}"
./tests/parser <<< "int f() {func(a >= a);}"
./tests/parser <<< "int f() {func(1 >= 1);}"
./tests/parser <<< "int f() {func(1.0 >= 1.0);}"
./tests/parser <<< "int f() {func(\"string\" >= \"string\");}"
./tests/parser <<< "int f() {func(a == a);}"
./tests/parser <<< "int f() {func(1 == 1);}"
./tests/parser <<< "int f() {func(1.0 == 1.0);}"
./tests/parser <<< "int f() {func(\"string\" == \"string\");}"
./tests/parser <<< "int f() {func(a != a);}"
./tests/parser <<< "int f() {func(1 != 1);}"
./tests/parser <<< "int f() {func(1.0 != 1.0);}"
./tests/parser <<< "int f() {func(\"string\" != \"string\");}"

# Misc
echo ""
echo "Misc"
echo ""
./tests/parser <<< "int f() {return a(1);}"
./tests/parser <<< "int f() {return a<b;}"
./tests/parser <<< "int f() {a:=1 div 1 ^ 2;}"
./tests/parser <<< "int f() {return 1+1;}"
./tests/parser <<< "int f() {return 1+a();}"
./tests/parser <<< "int f() {return a(1+2) + b(2^3);}"
./tests/parser <<< "int f() {return a(b()) + b(2 - a() ^ 2);}"
./tests/parser <<< "int f() {a:=a(1);}"
./tests/parser <<< "int f() {a:=a() + b();}"
./tests/parser <<< "int f() {a:=a(1+2) + b(2-3);}"
./tests/parser <<< "int f() {a:=a(b(c(d())));}"
./tests/parser <<< "int f() {return a(1 + 2*b(2 < c(1,1,1)), d() < e());}"
./tests/parser <<< "int f() {return a(b(1, 2 < 3) >= 4 * c(1 < d * d) / e(f()!= g() == h())) < b();}"
./tests/parser <<< "int b(int a) var int c, string s; {return s*b(a+c*b(s))-s;}"
./tests/parser <<< "var int a; void main() var string b; {b :=a(b(c(d+2*37))^3^7 >= q(5));}"
./tests/parser <<< "int f() {if 1 goto label;}"
./tests/parser <<< "int f() {if (1) goto label;}"
./tests/parser <<< "int f() {if (1+1) goto label;}"
./tests/parser <<< "int f() {if 1+1 goto label;}"
./tests/parser <<< "int f() {a:=func(a() > b() > 2);}"
./tests/parser <<< "int f() {a:=func(a(b >= c()) != b(1 + 2 < 2 ^ 7) > 2);}"
./tests/parser <<< "int f() {a:=a() + b();}"
./tests/parser <<< "int f() {a:=1+2+3-3-4-5^5^6^7/3/4/5 div 6 div 7*9*c<=1<=2>=4>=5==7==8!=6!=6;}"

# More commands
./tests/parser <<< "int f() {a:=a; func(f2(\"string\" + \"string\"));}"
./tests/parser <<< "int f() {label: a:=1; return;}"
./tests/parser <<< "int f() {a:=1.0;a:=1.0;a:=1.0;a:=1.0;}"
./tests/parser <<< "int f() {return a(b()) + b(2 - a() ^ 2);label:;}"
./tests/parser <<< "int f() {f();a:=\"string\";}"
./tests/parser <<< "int f() {return a(1);if (1) goto x;}"
./tests/parser <<< "int f() {func(f2(1.0 + 1.0));if (1) goto x;}"
./tests/parser <<< "int f() {func(f2(1 + 1));return a(1);}"
./tests/parser <<< "int f() {return a(1);func(f2(1.0));}"
./tests/parser <<< "int f() {if (1) goto x;return a <= a;}"
./tests/parser <<< "int f() {if (1.0) goto x;func(f2(\"string\" + \"string\"));}"

# Illegal tokens
echo ""
echo "Illegal tokens"
echo ""
./tests/parser <<< "var string l = f(par);"
./tests/parser <<< "int main() {if(l==NULL) goto Error\n\");}"
./tests/parser <<< "int main() {den = fce();}"

# Errors
echo ""
echo "Errors"
echo ""
./tests/parser <<< "int f() {return a(5 1);}"
./tests/parser <<< "int f() {return a< >b;}"
./tests/parser <<< "int f() {a:=1 div 1 ^ 2 == ==;}"
./tests/parser <<< "int f() {return 1+1+;}"
./tests/parser <<< "int f() {return +1+a();}"
./tests/parser <<< "int f() {return a((1+2 + b(2^3);}"
./tests/parser <<< "int f() {return a(b c ()) + b(2 - a() ^ 2);}"
./tests/parser <<< "int f() {a:=>a(1);}"
./tests/parser <<< "int f() {a:=!=a() + b();}"
./tests/parser <<< "int f() {a:=a(1+2) + b(2-3));}"
./tests/parser <<< "int f() {a:=a(b(c(d(-))));}"
./tests/parser <<< "int f() {return a(1 + 2**b(2 < c(1,1,1)), d() < e());}"
./tests/parser <<< "int f() {return a(b - (1, 2 < 3) >= 4 * c(1 < d * d) / e(f()!= g() == h())) < b();}"
./tests/parser <<< "int b(int a) var int c, string s; {return s f (),*b(a+c*b(s))-s;}"
./tests/parser <<< "var int a; void main() var kick string b; {b :=a(,b(c(d+2*37))^3^7 >= q(5));}"
./tests/parser <<< "int f() {a:=1+2+3-3-4-5^5^6^7/3/4/5 div 6 div 7*9*c<=1<=2>=4>=5==7*==8!=6!=6;}"